package org.drools.game.capture.flag;
 
import org.drools.game.model.api.*;
import org.drools.game.capture.flag.model.*;

rule "Give a point when the flag enters the Score Zone"
    lock-on-active true // this stops the rule to fire again after increasing the points
    when
        
        $player: Player(  )
        $t: Team( playersInTeam contains $player.getName() )
        $tb: TeamBundle( $sc: score )
        $flag: Flag( name == "Flag" ) from $player.getInventory().getItems()
        $r: Room( this == $sc, playersInRoom contains $player.getName() )
        $chest: Chest( name == "Flag Chest" )
    then
        modify($t){
            setPoints( $t.getPoints() + 1 )
        };
        
        System.out.println( ">> Score! Player: " + $player.getName() + " just enter the "+ $sc.getId() +" Score Zone" );
        System.out.println( ">> Team "+$t.getName() + " Score: " + $t.getPoints());
      //  cmds.notifyTeleportPlayer($player, $spawnred);
      //  cmds.notifyClearPlayerInventory($player);
      //  Flag flag = new Flag( "Flag", "banner" );
      //cmds.notifyItemToChest($chest, flag);
        
        
end


rule "Teleport a player who hits the chasm with the flag"
    when
        $player: Player( )
        $t: Team( playersInTeam contains $player.name )
        $tb: TeamBundle( name == $t.getName(), $s: spawn )
        $r: Room( id == "Chasm", playersInRoom contains $player.getName() )
        Flag( name == "Flag" ) from $player.getInventory().getItems()
        $chest: Chest( name == "Flag Chest" )
    then
        System.out.println(" >>> Player with the Flag in the Chasm!");
        System.out.println(" The player is returning to the swapn location: " + $tb.getSpawn());
        //if($teamred.contains($player.getName()))
       // {
          //  cmds.notifyTeleportPlayer($player, $spawnred);
       // }else if($teamblue.contains($player.getName()))
       // {
            //cmds.notifyTeleportPlayer($player, $spawnblue);
       // }
        //cmds.notifySetPlayerHealth($player, 20);
        //cmds.notifyEffectPlayer($player, CommandHelper.Effect.SPEED, 600, 3);
        //cmds.notifyEffectPlayer($player, CommandHelper.Effect.JUMP_BOOST, 600, 3);
        
        //cmds.notifyClearPlayerInventory($player);
        //Flag flag = new Flag("Flag", "banner");
	    //cmds.notifyItemToChest($chest, flag);
end

rule "Teleport a player who hits the chasm"
    when
        $player : Player()
        $t: Team( playersInTeam contains $player.name )
        $tb: TeamBundle( name == $t.getName(), $s: spawn )
        
        
        $r: Room(id == "Chasm", playersInRoom contains $player.getName())
        not Flag(name == "Flag") from $player.getInventory().getItems()
    then
        System.out.println(" >>> Player without the Flag in the Chasm!");
        System.out.println(" The player is returning to the swapn location: " + $tb.getSpawn());
       // if($teamred.contains($player.getName()))
       // {
           // cmds.notifyTeleportPlayer($player, $spawnred);
       // }else if($teamblue.contains($player.getName()))
       // {
           // cmds.notifyTeleportPlayer($player, $spawnblue);
        //}
        //cmds.notifySetPlayerHealth($player, 20);
        //cmds.notifyEffectPlayer($player, CommandHelper.Effect.SPEED, 600, 3);
        //cmds.notifyEffectPlayer($player, CommandHelper.Effect.JUMP_BOOST, 600, 3);
end


rule "Look for unassigned players"
    when
        $p : Player( )
        $teamred: Team(name == "red", playersInTeam not contains $p.getName())
        $teamblue: Team(name == "blue", playersInTeam not contains $p.getName())
        
    then    
        insertLogical(new UnassignedPlayer($p)); 
end

rule "assign player to the smaller team"
    when
        $p: UnassignedPlayer()
        $t: Team( $ts: playersInTeam.size )
        not( Team( playersInTeam.size < $ts) ) 
    then
        modify($t){
            addPlayer($p.getPlayer().getName())
        };
        System.out.println(">>>  Player: "+$p.getPlayer().getName() + " assigned to team: "+$t.getName());
        //cmds.notifyChat("Added player " + $p.getName() + " to team "+$selectedTeam.getName());
        //cmds.notifyTeleportPlayer($p, new Location(182, 96, -276));

end


rule "Create team bundle"
    when
        $t: Team()
        $spawn: NamedLocation( name == $t.getName() )
        $r: Room( id == $t.getName() )
        not ( TeamBundle( name == $t.name, spawn == $spawn, score == $r ) )
    then
        System.out.println(">> New Team Resource Created for team: "+ $t.getName());
        insert( new TeamBundle($t.getName(), $spawn, $r) );
end


